{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"Copy of C4_W3_Colab_T5_SQuAD_Model.ipynb","provenance":[{"file_id":"1crITaM_gn6VGFLW70fUuWjAuwQefoBSw","timestamp":1624299977746}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"7yuytuIllsv1"},"source":["# Assignment 3, Part 2: T5 SQuAD Model \n","\n","Welcome to the part 2 of testing the models for this week's assignment. This time we will perform decoding using the T5 SQuAD model. In this notebook we'll perform Question Answering by providing a \"Question\", its \"Context\" and see how well we get the \"Target\" answer. \n","\n","## IMPORTANT\n","\n","- As you cannot save the changes you make to this colab, you have to make a copy of this notebook in your own drive and run that. You can do so by going to `File -> Save a copy in Drive`. Close this colab and open the copy which you have made in your own drive.\n","\n","- Go to this [google drive folder](https://drive.google.com/drive/folders/16KmyvvVynQIfWWa7343z6XL6elWSWlCr?usp=sharing) named `NLP_C4_W3_Colabs`. In the folder, next to its name use the drop down menu to select `\"Add shortcut to Drive\" -> \"My Drive\" and then press ADD SHORTCUT`. This should add a shortcut to the folder `NLP_C4_W3_Colabs` within your own google drive. Please make sure this happens, as you'll be reading the data for this notebook from this folder.\n","\n","- Make sure your runtime is GPU (_not_ CPU or TPU). And if it is an option, make sure you are using _Python 3_. You can select these settings by going to `Runtime -> Change runtime type -> Select the above mentioned settings and then press SAVE`"]},{"cell_type":"markdown","metadata":{"id":"Db6LQW5cMSgx"},"source":["**Note: Restarting the runtime maybe required**.\n","\n","Colab will tell you if the restarting is necessary -- you can do this from the:\n","\n","Runtime > Restart Runtime\n","\n","option in the dropdown."]},{"cell_type":"markdown","metadata":{"id":"OTeAcYQo_4OW"},"source":["## Outline\n","\n","- [Part 0: Downloading and loading dependencies](#0)\n","- [Part 1: Mounting your drive for data accessibility](#1)\n","- [Part 2: Getting things ready](#2)\n","- [Part 3: Fine-tuning on SQuAD](#3)\n","    - [3.1 Loading in the data and preprocessing](#3.1)\n","    - [3.2 Decoding from a fine-tuned model](#3.2)"]},{"cell_type":"markdown","metadata":{"id":"ysxogfC1M158"},"source":["<a name='0'></a>\n","# Part 0: Downloading and loading dependencies\n","\n","Uncomment the code cell below and run it to download some dependencies that you will need. You need to download them once every time you open the colab. You can ignore the `kfac` error."]},{"cell_type":"code","metadata":{"id":"1BNZzCg0xv3R","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1624300030094,"user_tz":300,"elapsed":12147,"user":{"displayName":"Thomas Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gge-4Dkf8K882kgbBR9hPTcHW4PsnCxrfeR01sDBw=s64","userId":"06890183580794949868"}},"outputId":"f62b1276-06ec-4068-8a2a-4b264349f77f"},"source":["!pip -q install trax"],"execution_count":3,"outputs":[{"output_type":"stream","text":["\u001b[K     |████████████████████████████████| 634kB 4.1MB/s \n","\u001b[K     |████████████████████████████████| 4.3MB 49.1MB/s \n","\u001b[K     |████████████████████████████████| 153kB 53.4MB/s \n","\u001b[K     |████████████████████████████████| 256kB 55.0MB/s \n","\u001b[K     |████████████████████████████████| 3.9MB 52.3MB/s \n","\u001b[K     |████████████████████████████████| 1.2MB 53.7MB/s \n","\u001b[K     |████████████████████████████████| 368kB 53.4MB/s \n","\u001b[K     |████████████████████████████████| 61kB 10.3MB/s \n","\u001b[K     |████████████████████████████████| 2.5MB 49.5MB/s \n","\u001b[K     |████████████████████████████████| 3.3MB 46.2MB/s \n","\u001b[K     |████████████████████████████████| 901kB 41.8MB/s \n","\u001b[?25h"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"uDhi6qLQMHzs","executionInfo":{"status":"ok","timestamp":1624300206028,"user_tz":300,"elapsed":38521,"user":{"displayName":"Thomas Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gge-4Dkf8K882kgbBR9hPTcHW4PsnCxrfeR01sDBw=s64","userId":"06890183580794949868"}}},"source":["import string\n","import t5\n","import numpy as np\n","import trax \n","from trax.supervised import decoding\n","import textwrap \n","# Will come handy later.\n","wrapper = textwrap.TextWrapper(width=70)"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Cwr7LoXwQUW5"},"source":["<a name='1'></a>\n","# Part 1: Mounting your drive for data accessibility\n","\n","Run the code cell below and follow the instructions to mount your drive. The data is the same as used in the coursera version of the assignment."]},{"cell_type":"code","metadata":{"id":"P7ZF7KiXzQEg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1624300223112,"user_tz":300,"elapsed":17101,"user":{"displayName":"Thomas Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gge-4Dkf8K882kgbBR9hPTcHW4PsnCxrfeR01sDBw=s64","userId":"06890183580794949868"}},"outputId":"c81cc1a3-51e9-4a10-e1b6-8b928a105a4b"},"source":["from google.colab import drive\n","drive.mount('/content/drive/', force_remount=True)"],"execution_count":5,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive/\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"jc2hyEgkUppw","executionInfo":{"status":"ok","timestamp":1624300223114,"user_tz":300,"elapsed":7,"user":{"displayName":"Thomas Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gge-4Dkf8K882kgbBR9hPTcHW4PsnCxrfeR01sDBw=s64","userId":"06890183580794949868"}}},"source":["path = \"/content/drive/My Drive/NLP_C4_W3_Colabs\""],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HuTyft5EBQK6"},"source":["<a name='2'></a>\n","# Part 2: Getting things ready \n","\n","Run the code cell below to ready some functions which will later help us in decoding. The code and the functions are the same as the ones you previsouly ran on the coursera version of the assignment."]},{"cell_type":"code","metadata":{"id":"LJ8s_xZ1QtkI","executionInfo":{"status":"ok","timestamp":1624300228543,"user_tz":300,"elapsed":5434,"user":{"displayName":"Thomas Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gge-4Dkf8K882kgbBR9hPTcHW4PsnCxrfeR01sDBw=s64","userId":"06890183580794949868"}}},"source":["PAD, EOS, UNK = 0, 1, 2\n","\n","def detokenize(np_array):\n","  return trax.data.detokenize(\n","      np_array,\n","      vocab_type = 'sentencepiece',\n","      vocab_file = 'sentencepiece.model',\n","      vocab_dir = path + \"/models/\")\n","\n","def tokenize(s):\n","  # The trax.data.tokenize function operates on streams,\n","  # that's why we have to create 1-element stream with iter\n","  # and later retrieve the result with next.\n","  return next(trax.data.tokenize(\n","      iter([s]),\n","      vocab_type = 'sentencepiece',\n","      vocab_file = 'sentencepiece.model',\n","      vocab_dir = path + \"/models/\"))\n"," \n","vocab_size = trax.data.vocab_size(\n","    vocab_type = 'sentencepiece',\n","    vocab_file = 'sentencepiece.model',\n","    vocab_dir = path + \"/models/\")\n","\n","def get_sentinels(vocab_size):\n","    sentinels = {}\n","\n","    for i, char in enumerate(reversed(string.ascii_letters), 1):\n","\n","        decoded_text = detokenize([vocab_size - i]) \n","        \n","        # Sentinels, ex: <Z> - <a>\n","        sentinels[decoded_text] = f'<{char}>'\n","        \n","    return sentinels\n","\n","sentinels = get_sentinels(vocab_size)    \n","\n","\n","def pretty_decode(encoded_str_list, sentinels=sentinels):\n","    # If already a string, just do the replacements.\n","    if isinstance(encoded_str_list, (str, bytes)):\n","        for token, char in sentinels.items():\n","            encoded_str_list = encoded_str_list.replace(token, char)\n","        return encoded_str_list\n","  \n","    # We need to decode and then prettyfy it.\n","    return pretty_decode(detokenize(encoded_str_list))    "],"execution_count":7,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HEoSSKNwgDVA"},"source":["<a name='3'></a>\n","# Part 3: Fine-tuning on SQuAD\n","\n","Now let's try to fine tune on SQuAD and see what becomes of the model. For this, we need to write a function that will create and process the SQuAD `tf.data.Dataset`. Below is how T5 pre-processes SQuAD dataset as a text2text example. Before we jump in, we will have to first load in the data. \n","\n","<a name='3.1'></a>\n","### 3.1 Loading in the data and preprocessing\n","\n","You first start by loading in the dataset. The text2text example for a SQuAD example looks like:\n","\n","```\n","{\n","  'inputs': 'question: <question> context: <article>',\n","  'targets': '<answer_0>',\n","}\n","```\n","\n","The squad pre-processing function takes in the dataset and processes it using the sentencePiece vocabulary you have seen above. It generates the features from the vocab and encodes the string features. It takes on question, context, and answer, and returns \"question: Q context: C\" as input and \"A\" as target."]},{"cell_type":"code","metadata":{"id":"RcdR5Dh9UVEw","executionInfo":{"status":"ok","timestamp":1624300239896,"user_tz":300,"elapsed":304,"user":{"displayName":"Thomas Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gge-4Dkf8K882kgbBR9hPTcHW4PsnCxrfeR01sDBw=s64","userId":"06890183580794949868"}}},"source":["# Retrieve Question, C, A and return \"question: Q context: C\" as input and \"A\" as target.\n","def squad_preprocess_fn(dataset, mode='train'):\n","  return t5.data.preprocessors.squad(dataset)"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"id":"0NCIejwexv4x","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1624300267163,"user_tz":300,"elapsed":24916,"user":{"displayName":"Thomas Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gge-4Dkf8K882kgbBR9hPTcHW4PsnCxrfeR01sDBw=s64","userId":"06890183580794949868"}},"outputId":"1b581984-36cd-4da0-cc36-4039fa57a377"},"source":["# train generator, this takes about 1 minute\n","train_generator_fn, eval_generator_fn = trax.data.tf_inputs.data_streams(\n","  'squad/v1.1:3.0.0',\n","  data_dir= path + '/data/',\n","  bare_preprocess_fn=squad_preprocess_fn,\n","  input_name='inputs',\n","  target_name='targets'\n",")\n","train_generator = train_generator_fn()\n","next(train_generator)"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(b\"question: Who pitched a no - hitter against the Astros on Spetember 14th ? context: The Cubs successfully defended their National League Central title in 2008 , going to the postseason in consecutive years for the first time since 1906 \\xe2\\x80\\x93 08 . The offseason was dominated by three months of unsuccessful trade talks with the Orioles involving 2B Brian Roberts , as well as the signing of Chunichi Dragons star Kosuke Fukudome . The team recorded their 10 , 000th win in April , while establishing an early division lead . Reed Johnson and Jim Edmonds were added early on and Rich Harden was acquired from the Oakland Athletics in early July . The Cubs headed into the All - Star break with the N . L . ' s best record , and tied the league record with eight representatives to the All - Star game , including catcher Geovany Soto , who was named Rookie of the Year . The Cubs took control of the division by sweeping a four - game series in Milwaukee . On September 14 , in a game moved to Miller Park due to Hurricane Ike , Zambrano pitched a no - hitter against the Astros , and six days later the team clinched by beating St . Louis at Wrigley . The club ended the season with a 97 \\xe2\\x80\\x93 64 record and met Los Angeles in the NLDS . The heavily favored Cubs took an early lead in Game 1 , but James Loney ' s grand slam off Ryan Dempster changed the series ' momentum . Chicago committed numerous critical errors and were outscored 20 \\xe2\\x80\\x93 6 in a Dodger sweep , which provided yet another sudden ending . \",\n"," b'Zambrano')"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"QGQsExH8xv40","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1624300271037,"user_tz":300,"elapsed":222,"user":{"displayName":"Thomas Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gge-4Dkf8K882kgbBR9hPTcHW4PsnCxrfeR01sDBw=s64","userId":"06890183580794949868"}},"outputId":"71d6e014-5edd-47a1-8096-5111278c9f3b"},"source":["#print example from train_generator\n","(inp, out) = next(train_generator)\n","print(inp.decode('utf8').split('context:')[0])\n","print()\n","print('context:', inp.decode('utf8').split('context:')[1])\n","print()\n","print('target:', out.decode('utf8'))"],"execution_count":10,"outputs":[{"output_type":"stream","text":["question: What did Victoria and her mother disagree on ? \n","\n","context:  Though queen , as an unmarried young woman Victoria was required by social convention to live with her mother , despite their differences over the Kensington System and her mother ' s continued reliance on Conroy . Her mother was consigned to a remote apartment in Buckingham Palace , and Victoria often refused to see her . When Victoria complained to Melbourne that her mother ' s close proximity promised \" torment for many years \" , Melbourne sympathised but said it could be avoided by marriage , which Victoria called a \" schocking [ sic ] alternative \" . She showed interest in Albert ' s education for the future role he would have to play as her husband , but she resisted attempts to rush her into wedlock . \n","\n","target: the Kensington System\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"F_eGJHpPh-rz"},"source":["<a name='3.2'></a>\n","### 3.2 Decoding from a fine-tuned model\n","\n","You will now use an existing model that we trained for you. You will initialize, then load in your model, and then try with your own input. "]},{"cell_type":"code","metadata":{"id":"dZztX5XLa01p","executionInfo":{"status":"ok","timestamp":1624300311069,"user_tz":300,"elapsed":751,"user":{"displayName":"Thomas Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gge-4Dkf8K882kgbBR9hPTcHW4PsnCxrfeR01sDBw=s64","userId":"06890183580794949868"}}},"source":["# Initialize the model \n","model = trax.models.Transformer(\n","    d_ff = 4096,\n","    d_model = 1024,\n","    max_len = 2048,\n","    n_heads = 16,\n","    dropout = 0.1,\n","    input_vocab_size = 32000,\n","    n_encoder_layers = 24,\n","    n_decoder_layers = 24,\n","    mode='predict')  # Change to 'eval' for slow decoding."],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"id":"OQRAGG2fnSMe"},"source":["# load in the model\n","# this will take a minute\n","shape11 = trax.shapes.ShapeDtype((1, 1), dtype=np.int32)\n","model.init_from_file(path + '/models/model_squad.pkl.gz',\n","                     weights_only=True, input_signature=(shape11, shape11))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"l33umWrRyYNm"},"source":["# Uncomment to see the transformer's structure.\n","# print(model)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zzrxtGGDuUkc","executionInfo":{"status":"ok","timestamp":1624300474724,"user_tz":300,"elapsed":18,"user":{"displayName":"Thomas Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gge-4Dkf8K882kgbBR9hPTcHW4PsnCxrfeR01sDBw=s64","userId":"06890183580794949868"}}},"source":["# create inputs\n","# a simple example \n","# inputs = 'question: She asked him where is john? context: John was at the game'\n","\n","# an extensive example\n","inputs = 'question: What are some of the colours of a rose? context: A rose is a woody perennial flowering plant of the genus Rosa, in the family Rosaceae, or the flower it bears.There are over three hundred species and tens of thousands of cultivars. They form a group of plants that can be erect shrubs, climbing, or trailing, with stems that are often armed with sharp prickles. Flowers vary in size and shape and are usually large and showy, in colours ranging from white through yellows and reds. Most species are native to Asia, with smaller numbers native to Europe, North America, and northwestern Africa. Species, cultivars and hybrids are all widely grown for their beauty and often are fragrant.'"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"id":"nVlu-iwHcZRY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1624301844254,"user_tz":300,"elapsed":257,"user":{"displayName":"Thomas Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gge-4Dkf8K882kgbBR9hPTcHW4PsnCxrfeR01sDBw=s64","userId":"06890183580794949868"}},"outputId":"2b4c3de7-49fb-447f-d9dd-06a7c126bb43"},"source":["# tokenizing the input so we could feed it for decoding\n","print(tokenize(inputs))\n","test_inputs = tokenize(inputs) "],"execution_count":15,"outputs":[{"output_type":"stream","text":["[  822    10   363    33   128    13     8  6548    13     3     9  4659\n","    58  2625    10    71  4659    19     3     9  1679    63 24999  5624\n","    53  1475    13     8     3   729   302 15641     6    16     8   384\n"," 15641  8433    15     6    42     8  5624    34  4595     7     5  7238\n","    33   147   386  6189  3244    11     3   324     7    13  2909    13\n"," 10357   291     7     5   328   607     3     9   563    13  2677    24\n","    54    36     3    15 12621 21675     7     6 11908     6    42  5032\n","    53     6    28  6269     7    24    33   557     3  8715    28  4816\n","     3  2246 19376     7     5 20294  5215    16   812    11  2346    11\n","    33  1086   508    11   504    63     6    16  6548     3  6836    45\n","   872   190  4459     7    11  1131     7     5  1377  3244    33  4262\n","    12  3826     6    28  2755  2302  4262    12  1740     6  1117  1371\n","     6    11  3457 24411  2648     5     3  7727   725     6 10357   291\n","     7    11  9279     7    33    66  5456  4503    21    70  2790    11\n","   557    33 29346     5]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"PJh_Qw9G5jND","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1624301906992,"user_tz":300,"elapsed":62180,"user":{"displayName":"Thomas Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gge-4Dkf8K882kgbBR9hPTcHW4PsnCxrfeR01sDBw=s64","userId":"06890183580794949868"}},"outputId":"000f153d-e1b1-4c7c-c8a6-6815801eaaf2"},"source":["# Temperature is a parameter for sampling.\n","#   # * 0.0: same as argmax, always pick the most probable token\n","#   # * 1.0: sampling from the distribution (can sometimes say random things)\n","#   # * values inbetween can trade off diversity and quality, try it out!\n","output = decoding.autoregressive_sample(model, inputs=np.array(test_inputs)[None, :],\n","                                        temperature=0.0, max_length=10)\n","print(wrapper.fill(pretty_decode(output[0])))"],"execution_count":16,"outputs":[{"output_type":"stream","text":["white through yellows and reds\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lfBxFLJJEorf","executionInfo":{"status":"ok","timestamp":1624304224926,"user_tz":300,"elapsed":19436,"user":{"displayName":"Thomas Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gge-4Dkf8K882kgbBR9hPTcHW4PsnCxrfeR01sDBw=s64","userId":"06890183580794949868"}},"outputId":"8c864603-c44d-45a4-d5cb-e5d026afbb45"},"source":["# Temperature is a parameter for sampling.\n","#   # * 0.0: same as argmax, always pick the most probable token\n","#   # * 1.0: sampling from the distribution (can sometimes say random things)\n","#   # * values inbetween can trade off diversity and quality, try it out!\n","output = decoding.autoregressive_sample(model, inputs=np.array(test_inputs)[None, :],\n","                                        temperature=0.0, max_length=10)\n","print(wrapper.fill(pretty_decode(output[0])))"],"execution_count":20,"outputs":[{"output_type":"stream","text":["whites\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OZTJCuGFEkeZ","executionInfo":{"status":"ok","timestamp":1624304164840,"user_tz":300,"elapsed":18816,"user":{"displayName":"Thomas Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gge-4Dkf8K882kgbBR9hPTcHW4PsnCxrfeR01sDBw=s64","userId":"06890183580794949868"}},"outputId":"6fca5f69-ca32-48ae-ccec-2619c520bd67"},"source":["# Temperature is a parameter for sampling.\n","#   # * 0.0: same as argmax, always pick the most probable token\n","#   # * 1.0: sampling from the distribution (can sometimes say random things)\n","#   # * values inbetween can trade off diversity and quality, try it out!\n","output = decoding.autoregressive_sample(model, inputs=np.array(test_inputs)[None, :],\n","                                        temperature=0.5, max_length=10)\n","print(wrapper.fill(pretty_decode(output[0])))"],"execution_count":17,"outputs":[{"output_type":"stream","text":["white\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-RpIQ5TaEl8I","executionInfo":{"status":"ok","timestamp":1624304184884,"user_tz":300,"elapsed":18658,"user":{"displayName":"Thomas Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gge-4Dkf8K882kgbBR9hPTcHW4PsnCxrfeR01sDBw=s64","userId":"06890183580794949868"}},"outputId":"97e50cf3-35dc-453a-cd01-eb48a37311ad"},"source":["# Temperature is a parameter for sampling.\n","#   # * 0.0: same as argmax, always pick the most probable token\n","#   # * 1.0: sampling from the distribution (can sometimes say random things)\n","#   # * values inbetween can trade off diversity and quality, try it out!\n","output = decoding.autoregressive_sample(model, inputs=np.array(test_inputs)[None, :],\n","                                        temperature=0.8, max_length=10)\n","print(wrapper.fill(pretty_decode(output[0])))"],"execution_count":18,"outputs":[{"output_type":"stream","text":["whites\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LpY278wvEq9A","executionInfo":{"status":"ok","timestamp":1624304247267,"user_tz":300,"elapsed":21113,"user":{"displayName":"Thomas Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gge-4Dkf8K882kgbBR9hPTcHW4PsnCxrfeR01sDBw=s64","userId":"06890183580794949868"}},"outputId":"122b2a0a-76cc-4054-fa3c-af23412bfe63"},"source":["# Temperature is a parameter for sampling.\n","#   # * 0.0: same as argmax, always pick the most probable token\n","#   # * 1.0: sampling from the distribution (can sometimes say random things)\n","#   # * values inbetween can trade off diversity and quality, try it out!\n","output = decoding.autoregressive_sample(model, inputs=np.array(test_inputs)[None, :],\n","                                        temperature=0.8, max_length=10)\n","print(wrapper.fill(pretty_decode(output[0])))"],"execution_count":21,"outputs":[{"output_type":"stream","text":["whites and reds\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n4HPktuSEnYm","executionInfo":{"status":"ok","timestamp":1624304205495,"user_tz":300,"elapsed":20617,"user":{"displayName":"Thomas Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gge-4Dkf8K882kgbBR9hPTcHW4PsnCxrfeR01sDBw=s64","userId":"06890183580794949868"}},"outputId":"e7992a34-b3c7-4f46-858b-e94fce7a050c"},"source":["# Temperature is a parameter for sampling.\n","#   # * 0.0: same as argmax, always pick the most probable token\n","#   # * 1.0: sampling from the distribution (can sometimes say random things)\n","#   # * values inbetween can trade off diversity and quality, try it out!\n","output = decoding.autoregressive_sample(model, inputs=np.array(test_inputs)[None, :],\n","                                        temperature=1, max_length=10)\n","print(wrapper.fill(pretty_decode(output[0])))"],"execution_count":19,"outputs":[{"output_type":"stream","text":["reds and reds\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tyxVDfBpEp3P","executionInfo":{"status":"ok","timestamp":1624304280333,"user_tz":300,"elapsed":19173,"user":{"displayName":"Thomas Sun","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gge-4Dkf8K882kgbBR9hPTcHW4PsnCxrfeR01sDBw=s64","userId":"06890183580794949868"}},"outputId":"e09b8a1d-3cf4-439d-a1d1-6498a1eb3258"},"source":["# Temperature is a parameter for sampling.\n","#   # * 0.0: same as argmax, always pick the most probable token\n","#   # * 1.0: sampling from the distribution (can sometimes say random things)\n","#   # * values inbetween can trade off diversity and quality, try it out!\n","output = decoding.autoregressive_sample(model, inputs=np.array(test_inputs)[None, :],\n","                                        temperature=1, max_length=10)\n","print(wrapper.fill(pretty_decode(output[0])))"],"execution_count":22,"outputs":[{"output_type":"stream","text":["reds\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"BadBty9C-8wY"},"source":["### Note: As you can see the RAM is almost full, it is because the model and the decoding is memory heavy. You can run decoding just once. Running it the second time with another example might give you the same answer as before, or not run at all (crash). If that happens restart the runtime (see how to at the start of the notebook) and run all the cells again."]}]}